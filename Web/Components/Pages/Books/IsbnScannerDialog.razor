@using Microsoft.JSInterop
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<MudDialog @bind-Visible="IsVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.QrCodeScanner" Class="mr-3 mb-n1"/>
            Scan ISBN Barcode
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="text-align: center;">
            @if (!_scanning)
            {
                <MudText Typo="Typo.body1" Class="mb-4">
                    Position the ISBN barcode within the camera view to scan it automatically.
                </MudText>
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Videocam" 
                           OnClick="StartScanning">
                    Start Camera
                </MudButton>
            }
            else
            {
                <MudText Typo="Typo.body1" Class="mb-4">
                    Point your camera at the ISBN barcode
                </MudText>
                <video id="@_videoElementId" 
                       width="400" 
                       height="300" 
                       style="border: 2px solid #ddd; border-radius: 8px;"
                       autoplay></video>
                <div class="mt-4">
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Secondary" 
                               OnClick="StopScanning">
                        Stop Scanning
                    </MudButton>
                </div>
            }
            
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-4">
                    @_errorMessage
                </MudAlert>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<string> OnIsbnScanned { get; set; }

    private IJSObjectReference? _jsModule;
    private DotNetObjectReference<IsbnScannerDialog>? _dotNetObjectRef;
    private bool _scanning = false;
    private string _videoElementId = $"video-scanner-{Guid.NewGuid():N}";
    private string _errorMessage = string.Empty;

    private readonly DialogOptions _dialogOptions = new()
    {
        CloseButton = true,
        CloseOnEscapeKey = true,
        FullWidth = true,
        MaxWidth = MaxWidth.Medium
    };

    protected override async Task OnInitializedAsync()
    {
        _dotNetObjectRef = DotNetObjectReference.Create(this);
        _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/isbnScanner.js");
    }

    private async Task StartScanning()
    {
        try
        {
            _errorMessage = string.Empty;
            _scanning = true;
            StateHasChanged();

            if (_jsModule != null && _dotNetObjectRef != null)
            {
                await _jsModule.InvokeVoidAsync("isbnScanner.startScan", _videoElementId, _dotNetObjectRef);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to start camera: {ex.Message}";
            _scanning = false;
            StateHasChanged();
        }
    }

    private async Task StopScanning()
    {
        _scanning = false;
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("isbnScanner.stopScan");
        }
        StateHasChanged();
    }

    private async Task Cancel()
    {
        await StopScanning();
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
    }

    [JSInvokable]
    public async Task OnIsbnScannedFromJs(string isbn)
    {
        await StopScanning();
        await OnIsbnScanned.InvokeAsync(isbn);
        await Cancel();
    }

    [JSInvokable]
    public async Task OnScanErrorFromJs(string error)
    {
        _errorMessage = error;
        _scanning = false;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("isbnScanner.stopScan");
            await _jsModule.DisposeAsync();
        }
        _dotNetObjectRef?.Dispose();
    }
}