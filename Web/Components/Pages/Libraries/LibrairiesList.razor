@using Application.Libraries.List
@using Domain.Libraries
@using Domain.Primitives
@using MediatR
@inject IMediator Mediator
@rendermode InteractiveServer

@page "/libraries/list"

<MudStack Spacing="1" Class="mt-2">

        <MudPaper class=" py-4 px-6 mx-4 rounded"  Elevation="0" Align="Align.Center">
            <MudGrid Class="d-flex align-center">
                <MudItem xs="12" sm="2">
                    <MudText Typo="Typo.h5">Libraries</MudText>
                </MudItem>
                <MudItem xs="12" sm="8">
                    <div class="mud-background-gray rounded-xl">
                        <style>
                            .mcm-border-none > .mud-input-control-input-container > .mud-input.mud-input-outlined > .mud-input-outlined-border {
                                border-style: none;
                            }
                        </style>
                        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Clearable="true" class="rounded-xl mcm-border-none" Margin=" Margin.Dense" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
                    </div>
                </MudItem>
                <MudItem xs="12" sm="2" Class="d-flex justify-end">
                    <MudButton Href="/libraries/create" class="rounded" StartIcon="@Icons.Material.Filled.AddCircleOutline" Color=Color.Primary Variant="Variant.Filled">Create</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>

    <MudPaper class=" py-4 px-6 mx-4 rounded"  Elevation="0" Align="Align.Center">
        <style>
            .mud-table-header {
                background-color: #0078d2;
            }

            .mud-table-header .mud-table-cell {
                color: white !important;
            }
        </style>
        <MudTable @ref="table" class="mx-4 rounded" ServerData="@(new Func<TableState, Task<TableData<Library>>>(ServerReload))" Dense="true" Hover="true" Striped="true" Breakpoint="Breakpoint.None" HeaderClass="mud-table-header">
            <ColGroup>
                <col style="width: 90%;" />
                <col style="width: 10%;" />        
            </ColGroup>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="name_field" T="Library">Name</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit"  Title="Edit" />
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" Title="Delete" />
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>


</MudStack>

@code {

    private MudTable<Library>? table;
    private string searchString = "";

    private async Task<TableData<Library>> ServerReload(TableState state)
    {
        LibrariesColumn sortColumn = LibrariesColumn.Id;
        if (state.SortLabel == "name_field")
        {
            sortColumn = LibrariesColumn.Name;
        }

        SortOrder sortOrder = SortOrder.Ascending;
        if (state.SortDirection == SortDirection.Descending)
        {
            sortOrder = SortOrder.Descending;
        }
        
        var query = new GetLibrariesQuery(searchString, sortColumn, sortOrder, state.Page + 1, state.PageSize);

        var result = await Mediator.Send(query);
        if (result is not null && result.Items is not null)
        {
            return new TableData<Library>() { TotalItems = result.TotalCount, Items = result.Items.ToList() };
        }

        return new TableData<Library>() { TotalItems = 0, Items = new List<Library>() };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        Guard.Against.Null(table);
        table.ReloadServerData();
    }

}
