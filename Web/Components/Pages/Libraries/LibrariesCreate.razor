@using Application.Libraries.Create
@using Domain.Libraries
@using MediatR
@inject IMediator Mediator
@inject NavigationManager MyNavigationManager
@rendermode InteractiveServer

@page "/libraries/create"

<MudStack Spacing="1" Class="mt-2">

    <MudPaper class=" py-4 px-6 mx-4 rounded" Elevation="0" Align="Align.Center">
        <MudGrid Class="d-flex align-center">
            <MudItem xs="12" sm="2">
                <MudText Typo="Typo.h5">Libraries</MudText>
            </MudItem>            
        </MudGrid>        
    </MudPaper>

    @if (errors.Count() > 0)
    {
        <MudPaper class=" py-4 px-6 mx-4 rounded" Elevation="0" Align="Align.Center">
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                @foreach (var error in errors)
                {
                    <MudText>@error</MudText>
                }
            </MudAlert>
        </MudPaper>
    }
    
    <MudPaper class=" py-4 px-6 mx-4 rounded" Elevation="0" Align="Align.Center">
        <MudForm @ref="form">
            <MudTextField T="string" Label="Name" Required="true" RequiredError="User name is required!" @bind-Value="LibraryName" />                        
        </MudForm>                
    </MudPaper>

    <MudPaper class=" py-4 px-6 mx-4 rounded" Elevation="0" Align="Align.Center">
          <MudButton Class="ml-auto mt-3 mb-3" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(async ()=>await CreateLibrary())">Validate</MudButton>
    </MudPaper>

</MudStack>
        

@code {

    MudForm? form;
    public string? LibraryName { get; set; }
    List<string> errors = new();

    private async Task CreateLibrary()
    {        
        errors.Clear();

        var result = await Mediator.Send(new CreateLibraryCommand(LibraryName??""));

        if (result.IsSuccess)
        {
            MyNavigationManager.NavigateTo("/libraries/list");
            return;
        }
                
        if (result.Error == LibrariesError.Duplicate)
        {
            errors.Add("Library name already exists");
        }        
        else if (result.Error == LibrariesError.BadRequest)
        {
            errors.Add("Invalid library name");            
        }
        else
        {
            errors.Add("Invalid library name");
        }        
        
    }

}
