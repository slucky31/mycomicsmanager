@page "/"

@using MyComicsManagerWeb.Models
@using MyComicsManagerWeb.Services
@inject ComicService _comicService
@inject LibraryService _libraryService

<MudContainer MaxWidth="MaxWidth.False" >
    
    <NavMenu/>
    
    <MudPaper Class="pa-4 ma-2" Elevation="3">
        <MudTextField  @bind-Value="SearchValue" Label="Search" Variant="Variant.Outlined" Clearable="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Primary" OnAdornmentClick="@Search"  OnClearButtonClick="@Search" OnKeyDown="@Enter"/>
    </MudPaper>
    
    @if (SearchResultsComics.Any() || !string.IsNullOrEmpty(SearchValue))
    {
        @if (SearchInProgress)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
        }
        <ViewComics @bind-ComicsList="SearchResultsComics" Library="_library"/>
    }
    else
    {
        <ViewComics @bind-ComicsList="LastAddedComics" Library="_library"/>
    }
    
</MudContainer>

@code {
    
    private string SearchValue { get; set;}
    private List<Comic> SearchResultsComics { get; set; } = new();
    private List<Comic> LastAddedComics { get; set; } = new();
    private bool SearchInProgress { get; set; }
    private Library _library;
    
    protected override async Task OnInitializedAsync()
    {
        LastAddedComics = (List<Comic>) await _comicService.GetComicsOrderByLastAddedLimitBy(12);
        _library = await _libraryService.GetSelectedLibrary();
    }
    
    private async Task Search()
    {
        if (string.IsNullOrEmpty(SearchValue))
        {
            SearchResultsComics.Clear();
            StateHasChanged();
            return;
        }

        SearchInProgress = true;
        StateHasChanged();
        SearchResultsComics = (List<Comic>) await _comicService.Find(SearchValue,50);
        SearchInProgress = false;
        StateHasChanged();
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
         await Search();
        }
    }
}