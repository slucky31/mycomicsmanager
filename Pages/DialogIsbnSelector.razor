@using MyComicsManagerWeb.Models
@using MyComicsManagerWeb.Services
@using System.IO

@inject ComicService ComicService

<MudDialog>
    <DialogContent>

        <MudContainer Style="max-height: 500px; overflow-y: scroll">

            @if (firstPages == null)
            {
                <MudText Typo="Typo.h5">Loading ...</MudText>
            }
            else
            {
                <MudText Typo="Typo.h5">First pages</MudText>

                <!--  Les 5 premières pages-->

                <MudGrid Spacing="2" Justify="Justify.Center">
                    @foreach (var _page in firstPages)
                    {
                        string url = "/covers/isbn/" + _page + "?size=200";
                        int idImage = Int32.Parse(Path.GetFileNameWithoutExtension(_page).Split('-')[1]);
                        <MudItem xs="3">
                            <MudCard>
                                <MudCardMedia Image="@url" Height="200" />
                                <MudCardActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.ImageSearch" Color="Color.Default" OnClick="() => launchISBNAnalysis(idImage)" />
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }

            @if (lastPages == null)
            {
                <MudText Typo="Typo.h5">Loading ...</MudText>
            }
            else
            {
                <MudText Typo="Typo.h5">Last pages</MudText>

                <MudGrid Spacing="2" Justify="Justify.Center">
                    @foreach (var _page in lastPages)
                    {
                        string url = "/covers/isbn/" + _page + "?size=200";
                        int idImage = Int32.Parse(Path.GetFileNameWithoutExtension(_page).Split('-')[1]);
                        <MudItem xs="3">
                            <MudCard>
                                <MudCardMedia Image="@url" Height="200" />
                                <MudCardActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.ImageSearch" Color="Color.Default" OnClick="() => launchISBNAnalysis(idImage)" />
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }

            <MudSelect T="string" Label="Choose ISBN :" @bind-Value="@selectedISBN">
                @foreach (var isbn in listISBN)
                {
                    // https://stackoverflow.com/questions/66372676/blazor-mudselect-bind-selectedvalues-to-both-id-and-value
                    <MudSelectItem Value="@isbn" />
                }
            </MudSelect>



        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="Save">Save</MudButton>
    </DialogActions>

</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string Id { get; set; }

    private List<string> firstPages = null;

    private List<string> lastPages = null;

    private string selectedISBN;

    protected List<string> listISBN = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        firstPages = await ComicService.ExtractImages(Id, 4, true);
        lastPages = await ComicService.ExtractImages(Id, 4, false);
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Save()
    {
        MudDialog.Close(DialogResult.Ok(selectedISBN));
    }

    private async void launchISBNAnalysis(int imageId)
    {
        listISBN.Clear();
        listISBN = await ComicService.ExtractISBN(Id, imageId);
    }

}
