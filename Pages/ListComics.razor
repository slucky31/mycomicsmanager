@page "/comics/list"

@using MyComicsManagerWeb.Models
@using MyComicsManagerWeb.Services
@inject ComicService ComicService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">

    <h1>Comics <a class="btn btn-primary" href="/comics/create">Ajouter</a></h1>

    @if (comics == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        <MudGrid>
            @foreach (var comic in comics)
            {
                string coverPath = "/covers/" + @comic.CoverPath + "?size=250";
                string viewHref = "comics/view/" + @comic.Id;
                string editHref = "comics/edit/" + @comic.Id;
                <MudItem xs="6" sm="3" lg="2">
                    <MudCard>
                        <MudCardMedia Image="@coverPath" Style="/*background-color: white; background-size: contain; background-repeat: no-repeat; */"/>
                        <MudCardContent>
                            <MudIconButton Icon="@Icons.Material.Filled.Search" Link="@viewHref" Title="View"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Link="@editHref" Title="Edit" ></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteComic(comic.Id)" Title="Delete" />
                            <MudIconButton Icon="@Icons.Material.Filled.Download" Title="Download"/>
                        </MudCardContent>                        
                    </MudCard>
                </MudItem>
            }

        </MudGrid>
    }
</MudContainer>

    @code {
        private IEnumerable<Comic> comics;

        protected override async Task OnInitializedAsync()
        {
            comics = await ComicService.GetComics();
        }

        private async Task DeleteComic(String id)
        {
            await ComicService.DeleteComic(id);
            comics = await ComicService.GetComics();
        }
    }
