@using AngleSharp.Dom
@using Domain.Libraries
@using Domain.Primitives
@using MockQueryable.NSubstitute
@using MongoDB.Bson
@using MudBlazor.Services
@using NSubstitute
@using Persistence.Queries.Helpers
@using Web.Services
@inherits TestContext

@code{

    private readonly ILibrariesService _librariesServiceMock;


    public LibrariesListTest()
    {                
        _librariesServiceMock = Substitute.For<ILibrariesService>();        
    }

    [Fact]
    public void LibraryList_Should_RenderCorrectly_When_NoDataProvided()
    {
        // Arrange
        JSInterop.Mode = JSRuntimeMode.Loose;
        Services.AddSingleton(_librariesServiceMock);
        Services.AddMudServices();

        // Act
        var comp = RenderComponent<LibrairiesList>();

        // Assert
        comp.Should().NotBeNull();        
        comp.FindAll("table").Should().HaveCount(1);
        comp.FindAll("thead").Should().HaveCount(1);
        comp.FindAll("tbody").Should().HaveCount(1);
        comp.FindAll("thead tr").Should().HaveCount(1);
        comp.FindAll("tbody tr").Should().HaveCount(1);        
    }

    [Fact]
    public async Task LibraryList_Should_RenderCorrectly_When_DataAreProvided()
    {
        // Arrange
        JSInterop.Mode = JSRuntimeMode.Loose;
        List<Library> list = new();
        for (int i = 0; i < 10; i++)
        {
            Library lib = Library.Create(new Guid().ToString());
            list.Add(lib);
        }
        var query = list.AsQueryable().BuildMock();
        var mockPagedList = new PagedList<Library>(query);
        await mockPagedList.ExecuteQueryAsync(1, 10);
        _librariesServiceMock.FilterBy(Arg.Any<string>(), Arg.Any<LibrariesColumn>(), Arg.Any<SortOrder>(), Arg.Any<int>(), Arg.Any<int>()).Returns(mockPagedList);
        Services.AddSingleton(_librariesServiceMock);
        Services.AddMudServices();

        // Act
        var comp = RenderComponent<LibrairiesList>();

        // Assert
        comp.Should().NotBeNull();
        comp.FindAll("table").Should().HaveCount(1);
        comp.FindAll("thead").Should().HaveCount(1);
        comp.FindAll("tbody").Should().HaveCount(1);
        comp.FindAll("thead tr").Should().HaveCount(1);
        comp.FindAll("tbody tr").Should().HaveCount(10);
    }

    [Fact]
    public async Task LibraryList_Should_RenderOnlySearchedLine_When_SearchTextIsProvided()
    {
        // Arrange
        JSInterop.Mode = JSRuntimeMode.Loose;
        List<Library> list = new();
        for (int i = 0; i < 10; i++)
        {
            Library lib = Library.Create(new Guid().ToString());
            list.Add(lib);
        }

        Library searchedLib = Library.Create("lib");
        list.Add(searchedLib);
        var query = list.AsQueryable().BuildMock();
        var mockPagedList = new PagedList<Library>(query);
        await mockPagedList.ExecuteQueryAsync(1, 10);

        List<Library> filteredList = new();
        filteredList.Add(searchedLib);
        var query2 = list.AsQueryable().BuildMock();
        var mockPagedList2 = new PagedList<Library>(query2);
        await mockPagedList2.ExecuteQueryAsync(1, 10);
        
        _librariesServiceMock.FilterBy("", Arg.Any<LibrariesColumn>(), Arg.Any<SortOrder>(), Arg.Any<int>(), Arg.Any<int>()).Returns(mockPagedList);
        _librariesServiceMock.FilterBy("lib", Arg.Any<LibrariesColumn>(), Arg.Any<SortOrder>(), Arg.Any<int>(), Arg.Any<int>()).Returns(mockPagedList2);
        Services.AddSingleton(_librariesServiceMock);
        Services.AddMudServices();

        // Act
        var comp = RenderComponent<LibrairiesList>();

        // Add "lib" in the search field        
        await comp.InvokeAsync(() =>
        {
            var mudTextField = comp.FindComponent<MudTextField<string>>();
            mudTextField.Find("input").Change("lib");
            mudTextField.Instance.ValueChanged.InvokeAsync("new search term");
        });
        
        // Assert
        comp.Should().NotBeNull();
        comp.FindAll("table").Should().HaveCount(1);
        comp.FindAll("thead").Should().HaveCount(1);
        comp.FindAll("tbody").Should().HaveCount(1);
        comp.FindAll("thead tr").Should().HaveCount(1);
        comp.FindAll("tbody tr").Should().HaveCount(1);        
    }

    [Fact]
    public async Task LibraryList_Should_RenderDisplayForm_When_ButtonEditIsClicked()
    {
        // Arrange
        JSInterop.Mode = JSRuntimeMode.Loose;
        
        // Arrange - Create a list with 1 library
        Library lib = Library.Create("lib");
        List<Library> list = [lib];
        
        // Arrange - Create a mockPagedList with the list
        var query = list.AsQueryable().BuildMock();
        var mockPagedList = new PagedList<Library>(query);
        await mockPagedList.ExecuteQueryAsync(1, 10);

        // Arrange - Configure the FilterBy method to return the mockPagedList
        _librariesServiceMock.FilterBy(Arg.Any<string>(), Arg.Any<LibrariesColumn>(), Arg.Any<SortOrder>(), Arg.Any<int>(), Arg.Any<int>()).Returns(mockPagedList);        
        Services.AddSingleton(_librariesServiceMock);
        Services.AddMudServices();

        // Act - Render the component
        var comp = RenderComponent<LibrairiesList>();

        // Act - Click on the edit button where title is "Edit"
        await comp.Find($"button[title=\"Edit\"]").ClickAsync(new MouseEventArgs());

        // Assert
        comp.Should().NotBeNull();
        var navMan = Services.GetRequiredService<FakeNavigationManager>();
        Assert.Equal($"http://localhost/libraries/update/{lib.Id}", navMan.Uri);
    }

    [Fact]
    public async Task LibraryList_Should_RenderWithLinesMinusOne_When_ButtonDeleteIsClicked_WithSuccessDeleted()
    {
        // Arrange
        JSInterop.Mode = JSRuntimeMode.Loose;

        // Arrange - Create a list with 2 libraries
        Library lib1 = Library.Create("lib1");
        Library lib2 = Library.Create("lib2");
        List<Library> list = [lib1, lib2];

        // Arrange - Create a mockPagedList with the list
        var query = list.AsQueryable().BuildMock();
        var mockPagedList = new PagedList<Library>(query);
        await mockPagedList.ExecuteQueryAsync(1, 10);

        // Arrange - Configure the FilterBy method to return the mockPagedList
        _librariesServiceMock.FilterBy(Arg.Any<string>(), Arg.Any<LibrariesColumn>(), Arg.Any<SortOrder>(), Arg.Any<int>(), Arg.Any<int>()).Returns(mockPagedList);
        _librariesServiceMock.Delete(Arg.Any<string>()).Returns(Result.Success());
        Services.AddSingleton(_librariesServiceMock);
        Services.AddMudServices();

        // Act - Render the component
        var comp = RenderComponent<LibrairiesList>();

        // Assert - Before clicking on the delete button
        comp.Should().NotBeNull();
        comp.FindAll("table").Should().HaveCount(1);
        comp.FindAll("thead").Should().HaveCount(1);
        comp.FindAll("tbody").Should().HaveCount(1);
        comp.FindAll("thead tr").Should().HaveCount(1);
        comp.FindAll("tbody tr").Should().HaveCount(2);

        // Act - Click on the edit button where title is "Edit"
        await comp.Find($"button[title=\"Delete\"]").ClickAsync(new MouseEventArgs());

        // Assert - After clicking on the delete button
        comp.Should().NotBeNull();

        // TODO : Test display snackbar ?
                
    }

    [Fact]
    public async Task LibraryList_Should_RenderWithLinesMinusOne_When_ButtonDeleteIsClicked_WithFailureDeleted()
    {
        // Arrange
        JSInterop.Mode = JSRuntimeMode.Loose;

        // Arrange - Create a list with 2 libraries
        Library lib1 = Library.Create("lib1");
        Library lib2 = Library.Create("lib2");
        List<Library> list = [lib1, lib2];

        // Arrange - Create a mockPagedList with the list
        var query = list.AsQueryable().BuildMock();
        var mockPagedList = new PagedList<Library>(query);
        await mockPagedList.ExecuteQueryAsync(1, 10);

        // Arrange - Configure the FilterBy method to return the mockPagedList
        _librariesServiceMock.FilterBy(Arg.Any<string>(), Arg.Any<LibrariesColumn>(), Arg.Any<SortOrder>(), Arg.Any<int>(), Arg.Any<int>()).Returns(mockPagedList);
        _librariesServiceMock.Delete(Arg.Any<string>()).Returns(Result.Failure(LibrariesError.NotFound));
        Services.AddSingleton(_librariesServiceMock);
        Services.AddMudServices();

        // Act - Render the component
        var comp = RenderComponent<LibrairiesList>();

        // Assert - Before clicking on the delete button
        comp.Should().NotBeNull();
        comp.FindAll("table").Should().HaveCount(1);
        comp.FindAll("thead").Should().HaveCount(1);
        comp.FindAll("tbody").Should().HaveCount(1);
        comp.FindAll("thead tr").Should().HaveCount(1);
        comp.FindAll("tbody tr").Should().HaveCount(2);

        // Act - Click on the edit button where title is "Edit"
        await comp.Find($"button[title=\"Delete\"]").ClickAsync(new MouseEventArgs());

        // Assert - After clicking on the delete button
        comp.Should().NotBeNull();

        // TODO : Test display snackbar ?

    }

}
