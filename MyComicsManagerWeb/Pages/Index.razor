@page "/"

@using MyComicsManager.Model.Shared
@using MyComicsManagerWeb.Services
@inject ComicService ComicService
@inject LibraryService LibraryService

<MudContainer MaxWidth="MaxWidth.False" >
    
    <NavMenu/>
    
    <MudPaper Class="pa-4 ma-2" Elevation="3">
        <MudTextField  @bind-Value="SearchValue" Label="Search" Variant="Variant.Outlined" Immediate="true" Clearable="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Primary" OnAdornmentClick="@Search" OnClearButtonClick="@Clear" OnKeyPress="@Enter"/>
    </MudPaper>
    
    @if (SearchInProgress)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    
    @if (LastAddedComics.Any())
    {
        <ViewComics @bind-ComicsList="LastAddedComics" Library="_library"/>
    }
    else
    {
        <MudPaper Class="pa-4 ma-2" Elevation="3">
            <MudText>Aucun comic trouvé</MudText>
        </MudPaper>
    }
    
</MudContainer>

@code {
    
    private string SearchValue { get; set;}
    private List<Comic> LastAddedComics { get; set; } = new();
    private bool SearchInProgress { get; set; }
    private Library _library;
    private int _nbItemsPerPage = 50;
    
    protected override async Task OnInitializedAsync()
    {
        LastAddedComics = (List<Comic>) await ComicService.GetComicsOrderByLastAddedLimitBy(_nbItemsPerPage);
        _library = await LibraryService.GetSelectedLibrary();
    }
    
    private async Task Search()
    {
        SearchInProgress = true;
        if (!string.IsNullOrEmpty(SearchValue))
        {
            LastAddedComics = (List<Comic>) await ComicService.Find(SearchValue,_nbItemsPerPage);    
        }
        else
        {
            LastAddedComics = (List<Comic>) await ComicService.GetComicsOrderByLastAddedLimitBy(_nbItemsPerPage);
        }
        SearchInProgress = false;
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            await Search();
        }
    }
    
    private async Task Clear()
    {
        SearchValue = "";
        LastAddedComics = (List<Comic>) await ComicService.GetComicsOrderByLastAddedLimitBy(_nbItemsPerPage);
    }
}