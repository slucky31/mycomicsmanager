@using MyComicsManager.Model.Shared
@using MyComicsManagerWeb.Services
@using Newtonsoft.Json.Converters
@inject ComicService ComicService
@inject LibraryService LibraryService
@using Serilog


  
    <MudStack>        
        <InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="_ => FetchComics()">

            @foreach (var kvp in _comics)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@kvp.Key</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @{
                            var comicsList = @kvp.Value;
                        }
                        <ViewSimpleComics @bind-ComicsList="comicsList" Library="Library"></ViewSimpleComics>    
                    </MudCardContent>
                </MudCard>
            }
            <MudText Typo="Typo.h6">observerTarget - Debut</MudText>
            <div id="observerTarget"></div>
            <MudText Typo="Typo.h6">observerTarget - Fin</MudText>
        </InfiniteScroll>

    </MudStack>



@code {
    
    private List<string> LimitedSeriesList { get; set; }
    
    private List<string> LimitedSeriesList { get; set; }
    
    [Parameter]
    public Library Library { get; set; }

    private Dictionary<string, List<Comic>> _comics = new();


    private static int _maxItem = 40;
    
    private int _indexItem = 1;

    protected async Task FetchComics()
    {
        Log.Information("-- FetchComics");
        Log.Information("-- FetchComics : _indexItem = {Index}", _indexItem);
        
        var result = await ComicService.FindByPage(_indexItem++, _maxItem);
        Log.Information("-- FetchComics : result.totalPages {Count}",result.TotalPages);
        Log.Information("-- FetchComics : result.data.count {Count}",result.Data.Count);
        
        foreach (var comic in result.Data)

        {
            Log.Information("-- FetchComics : {Comic}",comic);
            if (string.IsNullOrEmpty(comic.Serie))
            {
                comic.Serie = "Empty";
            }
            
            if (!_comics.ContainsKey(comic.Serie))
            {
                var list = new List<Comic>();
                _comics.Add(comic.Serie,list);
            }
            _comics[comic.Serie].Add(comic);
        }
        this.StateHasChanged();
    }
}