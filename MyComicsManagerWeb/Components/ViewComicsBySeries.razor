@using MyComicsManagerWeb.Services
@using Newtonsoft.Json.Converters
@inject ComicService ComicService
@inject LibraryService LibraryService
@using Serilog
@using MyComicsManager.Model.Shared.Models

    <MudStack>        
        <InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="_ => FetchComics()">
            @foreach (var kvp in _comics)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@kvp.Key</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @{
                            var comicsList = @kvp.Value;
                        }
                        <ViewSimpleComics @bind-ComicsList="comicsList" Library="Library" />    
                    </MudCardContent>
                </MudCard>
            }
            <div id="observerTarget">
                @if (ExistDataToDisplay)
                {
                    <MudProgressCircular Color="Color.Info" Indeterminate="true" />
                    <MudText Typo="Typo.h6">Waiting data ...</MudText>    
                }
            </div>
        </InfiniteScroll>
    </MudStack>

@code {
    
    private List<string> LimitedSeriesList { get; set; }

    private bool ExistDataToDisplay { get; set; } = true;

    [Parameter]
    public Library Library { get; set; }

    [Parameter]
    public int MaxItemsByPage { get; set; } = 50;
    
    [Parameter]
    public string SearchItem { get; set; }    

    private Dictionary<string, List<Comic>> _comics = new();

    private int _indexItem = 1;

    protected async Task FetchComics()
    {
        var result = await ComicService.FindByPageOrderBySerie(SearchItem, _indexItem++, MaxItemsByPage);
        
        Log.Information("-- FetchComics");
        Log.Information("-- FetchComics : _indexItem = {Index}", _indexItem);
        Log.Information("-- FetchComics : result.totalPages {Count}",result.TotalPages);
        Log.Information("-- FetchComics : result.data.count {Count}",result.Data.Count);

        if ((result.Data.Count == 0) || (_indexItem >= result.TotalPages))
        {
            ExistDataToDisplay = false;
        }
        
        foreach (var comic in result.Data)
        {
            Log.Information("-- FetchComics : {Comic}",comic);
            if (string.IsNullOrEmpty(comic.Serie))
            {
                comic.Serie = "Empty";
            }
            
            if (!_comics.ContainsKey(comic.Serie))
            {
                var list = new List<Comic>();
                _comics.Add(comic.Serie,list);
            }
            _comics[comic.Serie].Add(comic);
            
            // Tri de la liste par Tome
            _comics[comic.Serie].Sort((x, y) => x.Volume.CompareTo(y.Volume));
        }
        
        this.StateHasChanged();
    }
}