name: .NET Core

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:      
      - name : Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x                    
      - name: Install dependencies
        run: dotnet restore                            
      - name: Build
        run: dotnet build --configuration Release --no-restore                    
      - name: Tests
        run: dotnet test --configuration Release --no-build --no-restore --results-directory "test-results" --collect:"Code Coverage"
        env:        
          MongoDbOptions__ConnectionString: ${{ secrets.MONGODBOPTIONS_CONNECTIONSTRING }}
      - name: Tests coverage
        run: |
          dotnet tool install --global dotnet-coverage  
          dotnet-coverage merge --output cobertura.xml --output-format cobertura "test-results/**/*.coverage"
      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}              
          coverage-reports: cobertura.xml
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: cobertura.xml

  publish:
    needs: build
    if: ${{ (github.ref == 'refs/heads/main') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      -
        name : Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup git
        run: |
          git config --global user.email "nicolas.dufaut@gmail.com"
          git config --global user.name "slucky31"

      - name: Install Versionize
        run: dotnet tool install --global Versionize

      - name: Versioning
        id: versionize
        run: versionize --changelog-all --exit-insignificant-commits
      
      - name: No release required
        if: steps.versionize.outcome != 'success'
        run: echo "Skipping Release. No release required."

      - name: Push changes to GitHub
        if: steps.versionize.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true
          force: true
            
      - name: Run codacy-coverage-reporter
        if: steps.versionize.outcome == 'success'  
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}              
          coverage-reports: cobertura.xml
      
      - name: Download coverage report
        if: steps.versionize.outcome == 'success'
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: .          
      
      - name: "Create release"
        if: steps.versionize.outcome == 'success'
        uses: "actions/github-script@v7.0.1"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const tags_url = context.payload.repository.tags_url + "?per_page=1"
              const result = await github.request(tags_url)
              const current_tag = result.data[0].name
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: current_tag,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: current_tag,
              });
            } catch (error) {
              core.setFailed(error.message);
            }

  docker-web:
    needs: publish
    if: ${{ (github.ref == 'refs/heads/main') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name : Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/slucky31/mcm
      - name: Build and push Docker image MyComicsManagerWeb
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          file: ./Web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
